"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("rxjs/add/observable/fromPromise");
require("rxjs/add/operator/mergeMap");
const Observable_1 = require("rxjs/Observable");
const ConnectService_1 = require("./ConnectService");
const TokenService_1 = require("./TokenService");
class QuoteProviderService {
    static buildOrder(maker, makerTokenAddress, takerTokenAddress, makerTokenAmount, milisecondsToExpire, relayerUrl, network) {
        const connectService = new ConnectService_1.ConnectService(relayerUrl, network);
        const promiseTokenPairs = connectService.getTokenPairs(makerTokenAddress, takerTokenAddress);
        return Observable_1.Observable.fromPromise(promiseTokenPairs).mergeMap((tokenPairs) => {
            const tokenPair = this.filterByAmount(tokenPairs, makerTokenAmount);
            if (tokenPair == null) {
                return new Promise((resolve) => { resolve(null); });
            }
            const price = tokenPair.tokenB.maxAmount.dividedBy(tokenPair.tokenA.maxAmount);
            const takerTokenAmount = TokenService_1.TokenService.getRoundedAmount(price.mul(makerTokenAmount), tokenPair.tokenB.precision);
            return connectService.getOrderWithFee(maker, makerTokenAddress, takerTokenAddress, makerTokenAmount, takerTokenAmount, milisecondsToExpire).then((order) => {
                return order;
            });
        }).toPromise();
    }
    static filterByAmount(tokenPairs, makerTokenAmount) {
        if (!tokenPairs || tokenPairs.length === 0) {
            return null;
        }
        const filteredAmount = tokenPairs.filter((pair) => {
            const roudedAmount = TokenService_1.TokenService.getRoundedAmount(makerTokenAmount, pair.tokenA.precision);
            return pair.tokenA.minAmount.lessThanOrEqualTo(roudedAmount) && pair.tokenA.maxAmount.greaterThanOrEqualTo(roudedAmount);
        });
        return filteredAmount.length > 0 ? filteredAmount[0] : tokenPairs[0];
    }
}
exports.QuoteProviderService = QuoteProviderService;
